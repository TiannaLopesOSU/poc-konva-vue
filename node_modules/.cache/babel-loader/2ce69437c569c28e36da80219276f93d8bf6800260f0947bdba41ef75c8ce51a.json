{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-825f6b4e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"drawing-container w-50 h-50\"\n};\nconst _hoisted_2 = {\n  class: \"border\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"brush\"\n}, \"Brush\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"eraser\"\n}, \"Eraser\", -1 /* HOISTED */));\nconst _hoisted_5 = [_hoisted_3, _hoisted_4];\nconst _hoisted_6 = {\n  ref: \"container\",\n  class: \"drawing-area w-50 h-50 border\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createTextVNode(\" Tool: \"), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.mode = $event)\n  }, _hoisted_5, 512 /* NEED_PATCH */), [[_vModelSelect, $data.mode]]), _createElementVNode(\"div\", _hoisted_6, null, 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","value","_hoisted_3","_hoisted_4","ref","_createElementBlock","_hoisted_1","_hoisted_2","$data","mode","$event","_hoisted_6"],"sources":["/Users/lopesti/WebTeam/poc-konva-vue/src/components/KonvaDrawing.vue"],"sourcesContent":["<template>\n  <div class=\"drawing-container w-50 h-50\">\n    <div class=\"border\">\n      Tool:\n      <select v-model=\"mode\">\n        <option value=\"brush\">Brush</option>\n        <option value=\"eraser\">Eraser</option>\n      </select>\n      <div ref=\"container\" class=\"drawing-area w-50 h-50 border\"></div>\n    </div>\n  </div>\n</template>\n<script>\nimport Konva from \"konva\";\n\nexport default {\n  data() {\n    return {\n      mode: \"brush\",\n      isPaint: false,\n      lastPointerPosition: null,\n    };\n  },\n  mounted() {\n    const width = window.innerWidth;\n    const height = window.innerHeight - 25;\n\n    // Create Konva Stage and Layer\n    const stage = new Konva.Stage({\n      container: this.$refs.container,\n      width: width,\n      height: height,\n    });\n\n    const layer = new Konva.Layer();\n    stage.add(layer);\n\n    // Create a canvas element and add it to the layer\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = stage.width();\n    canvas.height = stage.height();\n\n    const image = new Konva.Image({\n      image: canvas,\n      x: 0,\n      y: 0,\n    });\n    layer.add(image);\n\n    // Get the 2D context\n    const context = canvas.getContext(\"2d\");\n    context.strokeStyle = \"#df4b26\";\n    context.lineJoin = \"round\";\n    context.lineWidth = 5;\n\n    // Bind events\n    image.on(\"mousedown touchstart\", () => {\n      this.isPaint = true;\n      this.lastPointerPosition = stage.getPointerPosition();\n    });\n\n    stage.on(\"mouseup touchend\", () => {\n      this.isPaint = false;\n    });\n\n    stage.on(\"mousemove touchmove\", () => {\n      if (!this.isPaint) {\n        return;\n      }\n\n      if (this.mode === \"brush\") {\n        context.globalCompositeOperation = \"source-over\";\n      }\n      if (this.mode === \"eraser\") {\n        context.globalCompositeOperation = \"destination-out\";\n      }\n      context.beginPath();\n\n      const localPos = {\n        x: this.lastPointerPosition.x - image.x(),\n        y: this.lastPointerPosition.y - image.y(),\n      };\n      context.moveTo(localPos.x, localPos.y);\n      const pos = stage.getPointerPosition();\n      const localPos2 = {\n        x: pos.x - image.x(),\n        y: pos.y - image.y(),\n      };\n      context.lineTo(localPos2.x, localPos2.y);\n      context.closePath();\n      context.stroke();\n\n      this.lastPointerPosition = pos;\n      layer.batchDraw();\n    });\n  },\n};\n</script>\n\n<style scoped>\n.drawing-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f0f0f0;\n}\n\n.border {\n  border: 2px solid #000;\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n}\n\n.drawing-area {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAA6B;;EACjCA,KAAK,EAAC;AAAQ;gEAGfC,mBAAA,CAAoC;EAA5BC,KAAK,EAAC;AAAO,GAAC,OAAK;gEAC3BD,mBAAA,CAAsC;EAA9BC,KAAK,EAAC;AAAQ,GAAC,QAAM;oBAD7BC,UAAoC,EACpCC,UAAsC,C;;EAEnCC,GAAG,EAAC,WAAW;EAACL,KAAK,EAAC;;;uBAP/BM,mBAAA,CASM,OATNC,UASM,GARJN,mBAAA,CAOM,OAPNO,UAOM,G,iBAPc,SAElB,G,gBAAAP,mBAAA,CAGS;+DAHQQ,KAAA,CAAAC,IAAI,GAAAC,MAAA;yDAAJF,KAAA,CAAAC,IAAI,E,GAIrBT,mBAAA,CAAiE,OAAjEW,UAAiE,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}