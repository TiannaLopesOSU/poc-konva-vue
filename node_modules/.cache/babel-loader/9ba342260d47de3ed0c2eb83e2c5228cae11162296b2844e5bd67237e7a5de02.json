{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container mt-5\"\n};\nconst _hoisted_2 = {\n  class: \"row justify-content-center\"\n};\nconst _hoisted_3 = {\n  class: \"col-8\"\n};\nconst _hoisted_4 = {\n  class: \"border p-3\"\n};\nconst _hoisted_5 = {\n  class: \"row mt-2\"\n};\nconst _hoisted_6 = {\n  class: \"dropdown col-4\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn btn-secondary dropdown-toggle\",\n  type: \"button\",\n  id: \"dropdownMenuButton\",\n  \"data-bs-toggle\": \"dropdown\",\n  \"aria-expanded\": \"false\"\n}, \" Tool: \", -1 /* HOISTED */);\nconst _hoisted_8 = {\n  class: \"dropdown-menu\",\n  \"aria-labelledby\": \"dropdownMenuButton\"\n};\nconst _hoisted_9 = {\n  class: \"col-4\"\n};\nconst _hoisted_10 = {\n  class: \"col-4\"\n};\nconst _hoisted_11 = {\n  class: \"row\"\n};\nconst _hoisted_12 = {\n  ref: \"container\",\n  class: \"drawing-area mt-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _createElementVNode(\"ul\", _hoisted_8, [_createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item\",\n    onClick: _cache[0] || (_cache[0] = $event => $data.mode = 'brush')\n  }, \"Brush\")]), _createElementVNode(\"li\", null, [_createElementVNode(\"a\", {\n    class: \"dropdown-item\",\n    onClick: _cache[1] || (_cache[1] = $event => $data.mode = 'eraser')\n  }, \"Eraser\")])])]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    class: \"btn btn-danger\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.clearCanvas && $options.clearCanvas(...args))\n  }, \" Clear Canvas \")]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.exportCanvas && $options.exportCanvas(...args))\n  }, \" Export as Image \")])]), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"color\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.brushColor = $event),\n    class: \"form-control mt-3\",\n    onInput: _cache[5] || (_cache[5] = (...args) => $options.updateBrushColor && $options.updateBrushColor(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.brushColor]])]), _createElementVNode(\"div\", _hoisted_12, null, 512 /* NEED_PATCH */)])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","type","id","ref","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","onClick","_cache","$event","$data","mode","_hoisted_9","args","$options","clearCanvas","_hoisted_10","exportCanvas","_hoisted_11","brushColor","onInput","updateBrushColor","_hoisted_12"],"sources":["/Users/lopesti/WebTeam/poc-konva-vue/src/components/KonvaDrawing.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-8\">\n        <div class=\"border p-3\">\n          <div class=\"row mt-2\">\n            <div class=\"dropdown col-4\">\n              <button\n                class=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenuButton\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\"\n              >\n                Tool:\n              </button>\n              <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                <li>\n                  <a class=\"dropdown-item\" @click=\"mode = 'brush'\">Brush</a>\n                </li>\n                <li>\n                  <a class=\"dropdown-item\" @click=\"mode = 'eraser'\">Eraser</a>\n                </li>\n              </ul>\n            </div>\n            <div class=\"col-4\">\n              <button class=\"btn btn-danger\" @click=\"clearCanvas\">\n                Clear Canvas\n              </button>\n            </div>\n            <div class=\"col-4\">\n              <button class=\"btn btn-primary\" @click=\"exportCanvas\">\n                Export as Image\n              </button>\n            </div>\n          </div>\n          <div class=\"row\">\n            <input\n              type=\"color\"\n              v-model=\"brushColor\"\n              class=\"form-control mt-3\"\n              @input=\"updateBrushColor\"\n            />\n          </div>\n          <div ref=\"container\" class=\"drawing-area mt-3\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Konva from \"konva\";\n\nexport default {\n  data() {\n    return {\n      mode: \"brush\",\n      isPaint: false,\n      lastPointerPosition: null,\n      brushColor: \"#df4b26\",\n      stage: null,\n      layer: null,\n      canvas: null,\n    };\n  },\n  mounted() {\n    const width = window.innerWidth;\n    const height = window.innerHeight - 25;\n\n    // Create Konva Stage and Layer\n    this.stage = new Konva.Stage({\n      container: this.$refs.container,\n      width: width,\n      height: height,\n    });\n\n    this.layer = new Konva.Layer();\n    this.stage.add(this.layer);\n\n    // Create a canvas element and add it to the layer\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = this.stage.width();\n    this.canvas.height = this.stage.height();\n\n    const image = new Konva.Image({\n      image: this.canvas,\n      x: 0,\n      y: 0,\n    });\n    this.layer.add(image);\n\n    // Get the 2D context\n    const context = this.canvas.getContext(\"2d\");\n    context.strokeStyle = this.brushColor; // Set the brush color\n\n    // Bind events\n    context.lineJoin = \"round\";\n    context.lineWidth = 5;\n\n    // Bind events\n    image.on(\"mousedown touchstart\", () => {\n      this.isPaint = true;\n      this.lastPointerPosition = this.stage.getPointerPosition();\n    });\n\n    this.stage.on(\"mouseup touchend\", () => {\n      this.isPaint = false;\n    });\n\n    this.stage.on(\"mousemove touchmove\", () => {\n      if (!this.isPaint) {\n        return;\n      }\n      if (this.mode === \"brush\") {\n        context.globalCompositeOperation = \"source-over\";\n      }\n      if (this.mode === \"eraser\") {\n        context.globalCompositeOperation = \"destination-out\";\n      }\n      context.beginPath();\n\n      const localPos = {\n        x: this.lastPointerPosition.x - image.x(),\n        y: this.lastPointerPosition.y - image.y(),\n      };\n      context.moveTo(localPos.x, localPos.y);\n      const pos = this.stage.getPointerPosition();\n      const localPos2 = {\n        x: pos.x - image.x(),\n        y: pos.y - image.y(),\n      };\n      context.lineTo(localPos2.x, localPos2.y);\n      context.closePath();\n      context.stroke();\n\n      this.lastPointerPosition = pos;\n      this.layer.batchDraw();\n    });\n  },\n  methods: {\n    updateBrushColor() {\n      // Handle color input changes here if needed\n      const context = this.canvas.getContext(\"2d\");\n      context.strokeStyle = this.brushColor;\n    },\n    clearCanvas() {\n      // Clear the entire canvas\n      const context = this.canvas.getContext(\"2d\");\n      context.clearRect(0, 0, this.stage.width(), this.stage.height());\n      this.layer.batchDraw();\n    },\n    exportCanvas() {\n      // Export the canvas as an image\n      const dataURL = this.canvas.toDataURL(\"image/png\");\n      const a = document.createElement(\"a\");\n      a.href = dataURL;\n      a.download = \"canvas_image.png\";\n      a.style.display = \"none\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAA4B;;EAChCA,KAAK,EAAC;AAAO;;EACXA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAgB;gCACzBC,mBAAA,CAQS;EAPPD,KAAK,EAAC,mCAAmC;EACzCE,IAAI,EAAC,QAAQ;EACbC,EAAE,EAAC,oBAAoB;EACvB,gBAAc,EAAC,UAAU;EACzB,eAAa,EAAC;GACf,SAED;;EACIH,KAAK,EAAC,eAAe;EAAC,iBAAe,EAAC;;;EASvCA,KAAK,EAAC;AAAO;;EAKbA,KAAK,EAAC;AAAO;;EAMfA,KAAK,EAAC;AAAK;;EAQXI,GAAG,EAAC,WAAW;EAACJ,KAAK,EAAC;;;uBA3CnCK,mBAAA,CA+CM,OA/CNC,UA+CM,GA9CJL,mBAAA,CA6CM,OA7CNM,UA6CM,GA5CJN,mBAAA,CA2CM,OA3CNO,UA2CM,GA1CJP,mBAAA,CAyCM,OAzCNQ,UAyCM,GAxCJR,mBAAA,CA8BM,OA9BNS,UA8BM,GA7BJT,mBAAA,CAkBM,OAlBNU,UAkBM,GAjBJC,UAQS,EACTX,mBAAA,CAOK,MAPLY,UAOK,GANHZ,mBAAA,CAEK,aADHA,mBAAA,CAA0D;IAAvDD,KAAK,EAAC,eAAe;IAAEc,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAC,IAAI;KAAY,OAAK,E,GAExDjB,mBAAA,CAEK,aADHA,mBAAA,CAA4D;IAAzDD,KAAK,EAAC,eAAe;IAAEc,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAC,IAAI;KAAa,QAAM,E,OAI9DjB,mBAAA,CAIM,OAJNkB,UAIM,GAHJlB,mBAAA,CAES;IAFDD,KAAK,EAAC,gBAAgB;IAAEc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,gBAEpD,E,GAEFnB,mBAAA,CAIM,OAJNsB,WAIM,GAHJtB,mBAAA,CAES;IAFDD,KAAK,EAAC,iBAAiB;IAAEc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAG,YAAA,IAAAH,QAAA,CAAAG,YAAA,IAAAJ,IAAA,CAAY;KAAE,mBAEtD,E,KAGJnB,mBAAA,CAOM,OAPNwB,WAOM,G,gBANJxB,mBAAA,CAKE;IAJAC,IAAI,EAAC,OAAO;+DACHe,KAAA,CAAAS,UAAU,GAAAV,MAAA;IACnBhB,KAAK,EAAC,mBAAmB;IACxB2B,OAAK,EAAAZ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAO,gBAAA,IAAAP,QAAA,CAAAO,gBAAA,IAAAR,IAAA,CAAgB;iEAFfH,KAAA,CAAAS,UAAU,E,KAKvBzB,mBAAA,CAAqD,OAArD4B,WAAqD,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}